strmap = [                                                                                                        # 미로. 문자열을 리스트에 저장.
    "################################################################################################",
    "#@##                                  ##                            ##          ##          ## #",
    "# ## #################### ########### ## #################### ##### ## ## ##### ## ## ##### ## #",
    "# ## #################### ########### ## #################### ##### ## ## ##### ## ## ##### ## #",
    "# ##                   ## ##    ##    ## ##    ##    ##       ## ## ## ## ##    ## ## ##    ## #",
    "# ######## ########### ##### ## ## ######## ## ## ## ## ######## ## ##### ## ##### ## ## ##### #",
    "# ######## ########### ##### ## ## ######## ## ## ## ## ######## ## ##### ## ##### ## ## ##### #",
    "# ##    ## ##       ##    ## ## ##          ##    ##    ##       ##       ## ##    ## ##    ## #",
    "# ## ## ## ##### ## ##### ## ## ## ####################### ##### ########### ######## ##### ## #",
    "# ## ## ## ##### ## ##### ## ## ## ####################### ##### ########### ######## ##### ## #",
    "#    ## ##    ## ##    ##    ## ## ##          ## ##       ##    ##       ##    ##    ## ## ## #",
    "####### ##### ######## ######## ## ## ######## ## ## ######## ## ## ## ######## ## ##### ## ## #",
    "####### ##### ######## ######## ## ## ######## ## ## ######## ## ## ## ######## ## ##### ## ## #",
    "# ##    ## ## ##    ## ##       ## ## ##    ## ## ## ## ##    ##    ## ##    ## ## ##    ## ## #",
    "# ## ##### ## ## ## ## ## ######## ## ##### ## ## ## ## ## ######## ##### ## ## ## ## ## ## ## #",
    "# ## ##### ## ## ## ## ## ######## ## ##### ## ## ## ## ## ######## ##### ## ## ## ## ## ## ## #",
    "# ##    ##    ## ##    ## ##    ## ##       ## ## ## ## ## ##       ##    ## ##    ## ## ##    #",
    "# ##### ## ##### ######## ##### ## ######## ## ## ## ## ## ########### ##### ########### ##### #",
    "# ##### ## ##### ######## ##### ## ######## ## ## ## ## ## ########### ##### ########### ##### #",
    "#    ## ## ##          ##    ##       ##    ## ##       ##    ##       ##    ##          ## ## #",
    "# ## ## ## ########### ##### ## ######## ##### ############## ## ######## ## ##### ##### ## ## #",
    "# ## ## ## ########### ##### ## ######## ##### ############## ## ######## ## ##### ##### ## ## #",
    "# ##    ##    ##    ##    ## ##    ##       ##          ##    ##    ##    ##    ##    ##    ## #",
    "# ########### ## ## ##### ## ######## ################# ## ##### ##### ######## ##### ## ##### #",
    "# ########### ## ## ##### ## ######## ################# ## ##### ##### ######## ##### ## ##### #",
    "# ##             ##    ## ## ##          ##    ##    ## ## ##    ##    ##    ## ##    ## ##    #",
    "# ## ################# ## ## ## ########### ## ## ## ## ## ## ##### ##### ## ## ## ##### ## ####",
    "# ## ################# ## ## ## ########### ## ## ## ## ## ## ##### ##### ## ## ## ##### ## ####",
    "# ##       ##       ## ## ## ## ##          ##    ##    ## ## ## ##    ## ## ##    ##    ## ## #",
    "# ######## ## ##### ## ## ## ## ## ####################### ## ## ##### ## ## ########### ## ## #",
    "# ######## ## ##### ## ## ## ## ## ####################### ## ## ##### ## ## ########### ## ## #",
    "#    ## ## ## ##    ##    ##    ## ##       ##    ##    ##    ##    ## ## ## ##       ## ##    #",
    "#### ## ## ## ## ##### ########### ##### ##### ## ## ## ## ######## ## ## ## ## ##### ## ##### #",
    "#### ## ## ## ## ##### ########### ##### ##### ## ## ## ## ######## ## ## ## ## ##### ## ##### #",
    "#    ##    ## ## ##    ##       ## ##    ##    ##    ##    ##       ##    ##    ## ## ## ##    #",
    "# ########### ## ######## ##### ## ## ##### ################# ##### ############## ## ## ## ####",
    "# ########### ## ######## ##### ## ## ##### ################# ##### ############## ## ## ## ####",
    "#             ##          ##    ## ##    ## ##          ##    ##    ##             ## ## ## ## #",
    "############################ ##### ##### ## ## ## ##### ## ##### ################# ## ##### ## #",
    "############################ ##### ##### ## ## ## ##### ## ##### ################# ## ##### ## #",
    "#          ##             ##    ##    ##    ## ## ## ##    ##    ##       ##       ##       ## #",
    "#### ######## ## ############## ##### ## ######## ## ######## ######## ## ## ##### ########### #",
    "#### ######## ## ############## ##### ## ######## ## ######## ######## ## ## ##### ########### #",
    "#    ##       ##    ##       ##       ## ##       ##    ##    ##       ##    ## ## ##    ##    #",
    "# ##### ########### ## ## ############## ##### ##### ##### ######## ########### ## ## ## ## ## #",
    "# ##### ########### ## ## ############## ##### ##### ##### ######## ########### ## ## ## ## ## #",
    "#                ##    ##                      ##                   ##                ##    ##G#",
    "################################################################################################"
]

# @ = Player
# G = Goal
# # = Block


# for i in range(0, len(strmap)):
#    print(strmap[i])                         # 출력해서 볼 수 있다. (Maze.Show() 에 있는 코드랑 비슷함)

from enum import Enum                         # 열거형을 사용하기 위해 모듈을 가져옴.


class Direction(Enum):                        # '방향' 클래스(열거형)
    Right = 0
    Down = 1
    Left = 2
    Up = 3
    
class ObjectCode(Enum):                       # '개체코드' 클래스(열거형)
    Empty = 0                                   # 비어있음
    Block = 1                                   # 블럭임
    Goal = 2                                    # 골인지점
    Player = 3                                  # 플레이어
    Null = 100                                  # 미상물체

class Maze:                                                                             # '미로' 클래스
    def __init__(self, strmap):                                                           # 초기화. 지도(문자열 집합)를 받는다
        self.maze = strmap
        self.pd = Direction.Right                                                           # player direction 줄여서 pd
        for i in range(0, len(self.maze)):
            for k in range(0, len(self.maze[i])):
                if self.maze[i][k] == '@':                                                  # 지도에서 '@' 모양을 찾음
                    self.px = k                                                             # player x 줄여서 px
                    self.py = i                                                             # player y 줄여서 py
                    print(str(self.px) + ", " + str(self.py) + ", " + str(self.pd))         # 잘 됐는지 출력해봄
                    return                                                                  # 플레이어를 찾았으면 맵의 나머지 부분은 찾을 필요가 없으므로 return


    def Show(self):                                                                       # 미로 출력하기.
        for i in range(0, len(self.maze)):
            for k in range(0, len(self.maze[i])):
                print(self.maze[i][k], end = ' ')
            print(end = '\n')

    def GoAhead(self):                                                                    # 플레이어 전진시키기
        if self.Next() is ObjectCode.Block:                                                 # 다음 오브젝트가 블럭이면 앞으로 못가니까 return 
            return
        
        temp = list(self.maze[self.py])                                                     # 파이썬은 C처럼 못하더라. 어쨋든 지나간 자리는 '.' 으로 표시함
        temp[self.px] = '.'                                                                 # 구글에 '파이썬 문자열 문자 변경' 이라고 쳐서 맨 위에 나온거 참고함
        self.maze[self.py] = "".join(temp)                                                  # 좆 이 썬
        
        if self.pd is Direction.Right:                                                      # Player Direction이 오른쪽이면
            self.px += 1                                                                    # x좌표 +1
        elif self.pd is Direction.Down:                                                     #                    아래쪽이면
            self.py += 1                                                                    # y좌표 +1
        elif self.pd is Direction.Left:                                                     # ...
            self.px -= 1                                                                    # ..
        elif self.pd is Direction.Up:
            self.py -= 1
            
        temp = list(self.maze[self.py])                                                     # 새로운 플레이어 위치에 플레이어 아이콘('@') 표시
        temp[self.px] = '@'
        self.maze[self.py] = "".join(temp)

    def Next(self):                                                                       # 다음 오브젝트가 뭔지를 리턴하는 함수
        nextObj = ' '                                                                       # 임시 변수를 선언하고 기본값을 ' ' 으로
        
        if self.pd is Direction.Right:                                                      # 오른쪽을 보고있으면 
            nextObj = self.maze[self.py][self.px + 1]                                       # x좌표 +1해서 거기가 뭔지 검사, nextObj에 넣어줌
        elif self.pd is Direction.Down:                                                     # ...
            nextObj = self.maze[self.py + 1][self.px]                                       # ..
        elif self.pd is Direction.Left:
            nextObj = self.maze[self.py][self.px - 1]
        elif self.pd is Direction.Up:
            nextObj = self.maze[self.py - 1][self.px]
        
        if nextObj == 'G':                                                                  # 이거면 이거고 저거면 저거고...
            return ObjectCode.Goal                                                          # nextObj에 저장된 문자에 따라 다음 오브젝트가 뭔지 구분해서 리턴해줌
        elif nextObj == '#':
            return ObjectCode.Block
        elif nextObj == ' ' or '.':
            return ObjectCode.Empty
        else:
            return ObjectCode.Null
    
    def turnRight(self):                                                                  # 오른쪽으로 돌아버리는 함수
        if self.pd is Direction.Right:
            self.pd = Direction.Down
        elif self.pd is Direction.Down:
            self.pd = Direction.Left
        elif self.pd is Direction.Left:
            self.pd = Direction.Up
        elif self.pd is Direction.Up:
            self.pd = Direction.Right
        
    def turnLeft(self):                                                                   # 왼쪽으로 돌리기 귀찮으니 오른쪽으로 세번 돌아줌
        for i in range(0, 3):
            self.turnRight()
    
    def leftHand(self):                                                                   # 왼쪽 벽 짚고 가기
        while self.GoAhead():                                                               # GoAhead() 가 안될때까지 반복 -> 벽에 붙을때까지 앞으로 감
            None                                                                            # while문의 내용은 없다. 아무것도 안할거다.
            
        if self.Next() == ObjectCode.Goal:                                                # 골이냐
            self.Show()                                                                     # 맵 보여주고 끝냄
            print("Clear!")
            return
        
        self.turnRight()                                                                  # 아님 돌고
        
        while True:                                                                       # 탐색 시작
            if self.Next() == ObjectCode.Empty:                                             # 앞이 비었으면 앞으로 가서 좌회전(왼쪽이 비었는지 확인하기 위함)
                self.GoAhead()
                self.turnLeft()
            elif self.Next() == ObjectCode.Goal:                                            # 앞이 골이면 끝
                self.Show()
                print("Clear!")
                return
            elif self.Next() == ObjectCode.Block:                                           # 앞이 막혔으면 우회전(위에서 좌회전한거 원위치 시키는 기능도 있음)
                self.turnRight();


maze = Maze(strmap)
maze.Show()

print("\n\n\n\n\n\n\n\n\n")

maze.leftHand()
